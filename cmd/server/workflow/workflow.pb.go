// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd/server/workflow/workflow.proto

// Workflow Service
//
// Workflow Service API performs CRUD actions against application resources

package workflow

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type WorkflowCreateResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowCreateResponse) Reset()         { *m = WorkflowCreateResponse{} }
func (m *WorkflowCreateResponse) String() string { return proto.CompactTextString(m) }
func (*WorkflowCreateResponse) ProtoMessage()    {}
func (*WorkflowCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_192bc67c39cca05a, []int{0}
}
func (m *WorkflowCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowCreateResponse.Merge(m, src)
}
func (m *WorkflowCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowCreateResponse proto.InternalMessageInfo

func (m *WorkflowCreateResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type WorkflowListResponse struct {
	Workflows            []*v1alpha1.Workflow `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WorkflowListResponse) Reset()         { *m = WorkflowListResponse{} }
func (m *WorkflowListResponse) String() string { return proto.CompactTextString(m) }
func (*WorkflowListResponse) ProtoMessage()    {}
func (*WorkflowListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_192bc67c39cca05a, []int{1}
}
func (m *WorkflowListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowListResponse.Merge(m, src)
}
func (m *WorkflowListResponse) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowListResponse proto.InternalMessageInfo

func (m *WorkflowListResponse) GetWorkflows() []*v1alpha1.Workflow {
	if m != nil {
		return m.Workflows
	}
	return nil
}

type WorkflowResponse struct {
	Workflows            *v1alpha1.Workflow `protobuf:"bytes,1,opt,name=workflows,proto3" json:"workflows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WorkflowResponse) Reset()         { *m = WorkflowResponse{} }
func (m *WorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*WorkflowResponse) ProtoMessage()    {}
func (*WorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_192bc67c39cca05a, []int{2}
}
func (m *WorkflowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowResponse.Merge(m, src)
}
func (m *WorkflowResponse) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowResponse proto.InternalMessageInfo

func (m *WorkflowResponse) GetWorkflows() *v1alpha1.Workflow {
	if m != nil {
		return m.Workflows
	}
	return nil
}

type WorkflowQuery struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	StartIdx             int32    `protobuf:"varint,3,opt,name=StartIdx,proto3" json:"StartIdx,omitempty"`
	PageSize             int32    `protobuf:"varint,4,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowQuery) Reset()         { *m = WorkflowQuery{} }
func (m *WorkflowQuery) String() string { return proto.CompactTextString(m) }
func (*WorkflowQuery) ProtoMessage()    {}
func (*WorkflowQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_192bc67c39cca05a, []int{3}
}
func (m *WorkflowQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowQuery.Merge(m, src)
}
func (m *WorkflowQuery) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowQuery.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowQuery proto.InternalMessageInfo

func (m *WorkflowQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkflowQuery) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WorkflowQuery) GetStartIdx() int32 {
	if m != nil {
		return m.StartIdx
	}
	return 0
}

func (m *WorkflowQuery) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func init() {
	proto.RegisterType((*WorkflowCreateResponse)(nil), "workflow.WorkflowCreateResponse")
	proto.RegisterType((*WorkflowListResponse)(nil), "workflow.WorkflowListResponse")
	proto.RegisterType((*WorkflowResponse)(nil), "workflow.WorkflowResponse")
	proto.RegisterType((*WorkflowQuery)(nil), "workflow.WorkflowQuery")
}

func init() { proto.RegisterFile("cmd/server/workflow/workflow.proto", fileDescriptor_192bc67c39cca05a) }

var fileDescriptor_192bc67c39cca05a = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x96, 0xdb, 0xb2, 0xda, 0x1a, 0x21, 0x16, 0xb3, 0x40, 0x08, 0xab, 0x28, 0xca, 0xa9, 0x42,
	0xc8, 0x56, 0x17, 0x4e, 0x2b, 0x71, 0x61, 0x0f, 0x08, 0x09, 0x21, 0x48, 0x91, 0x90, 0x96, 0x93,
	0x37, 0x1d, 0xbc, 0xa1, 0x6d, 0x1c, 0xd9, 0xde, 0x2c, 0xe5, 0xc8, 0x81, 0x17, 0xe0, 0xa5, 0x38,
	0x70, 0x40, 0xe2, 0x05, 0x50, 0xc5, 0x83, 0xa0, 0x38, 0xb5, 0x83, 0x48, 0xcb, 0x85, 0x3d, 0xe5,
	0x9b, 0xf9, 0x32, 0xdf, 0x8c, 0xe7, 0x07, 0x27, 0xd9, 0x62, 0xca, 0x34, 0xa8, 0x0a, 0x14, 0xbb,
	0x90, 0x6a, 0xf6, 0x6e, 0x2e, 0x2f, 0x3c, 0xa0, 0xa5, 0x92, 0x46, 0x92, 0x5d, 0x67, 0x87, 0xfb,
	0x42, 0x0a, 0x69, 0x9d, 0xac, 0x46, 0x0d, 0x1f, 0x1e, 0x08, 0x29, 0xc5, 0x1c, 0x18, 0x2f, 0x73,
	0xc6, 0x8b, 0x42, 0x1a, 0x6e, 0x72, 0x59, 0xe8, 0x35, 0x7b, 0x2c, 0x72, 0x73, 0x76, 0x7e, 0x4a,
	0x33, 0xb9, 0x60, 0x5c, 0xd9, 0xf0, 0xf7, 0x16, 0xb0, 0x72, 0x26, 0xea, 0x18, 0xdd, 0x26, 0xae,
	0xc6, 0x7c, 0x5e, 0x9e, 0xf1, 0x31, 0x13, 0x50, 0x80, 0xe2, 0x06, 0xa6, 0x8d, 0x48, 0xf2, 0x08,
	0xdf, 0x7e, 0xb3, 0xfe, 0xe9, 0x58, 0x01, 0x37, 0x90, 0x82, 0x2e, 0x65, 0xa1, 0x81, 0x84, 0x78,
	0x57, 0xad, 0x71, 0x80, 0x62, 0x34, 0x1a, 0xa6, 0xde, 0x4e, 0x34, 0xde, 0x77, 0x51, 0xcf, 0x73,
	0x6d, 0x7c, 0xcc, 0x5b, 0x3c, 0x74, 0x29, 0x75, 0x80, 0xe2, 0xfe, 0xe8, 0xea, 0xe1, 0x63, 0xda,
	0x96, 0x49, 0x5d, 0x99, 0x16, 0xd0, 0x72, 0x26, 0x68, 0x5d, 0x26, 0xf5, 0x6d, 0x71, 0x65, 0x52,
	0xa7, 0x9e, 0xb6, 0x7a, 0x89, 0xc4, 0x7b, 0xde, 0xbd, 0x25, 0x21, 0xba, 0xd4, 0x84, 0x4b, 0x7c,
	0xcd, 0xb9, 0x5f, 0x9d, 0x83, 0x5a, 0x12, 0x82, 0x07, 0x2f, 0xf8, 0xc2, 0xb5, 0xc3, 0x62, 0x72,
	0x80, 0x87, 0xf5, 0x57, 0x97, 0x3c, 0x83, 0xa0, 0x67, 0x89, 0xd6, 0x51, 0x37, 0x71, 0x62, 0xb8,
	0x32, 0xcf, 0xa6, 0x1f, 0x82, 0x7e, 0x8c, 0x46, 0x57, 0x52, 0x6f, 0xd7, 0xdc, 0x4b, 0x2e, 0x60,
	0x92, 0x7f, 0x84, 0x60, 0xd0, 0x70, 0xce, 0x3e, 0xfc, 0xd6, 0xc3, 0xd7, 0x5d, 0xee, 0x09, 0xa8,
	0x2a, 0xcf, 0x80, 0x7c, 0x46, 0x78, 0xa7, 0x99, 0x11, 0xf9, 0xbf, 0x37, 0x86, 0x71, 0x4b, 0x6e,
	0x1e, 0x7e, 0x72, 0xef, 0xd3, 0x8f, 0x5f, 0x5f, 0x7a, 0xb7, 0x92, 0x3d, 0xbb, 0x7b, 0xd5, 0xd8,
	0x6f, 0xd2, 0x11, 0xba, 0x4f, 0x4e, 0xf0, 0xa0, 0x9e, 0x3a, 0xb9, 0xd3, 0x95, 0xb1, 0x7d, 0x0a,
	0xa3, 0x2e, 0xf1, 0xe7, 0x9a, 0x24, 0x77, 0xad, 0xfa, 0x4d, 0x72, 0xe3, 0x6f, 0x75, 0x4d, 0x5e,
	0xe3, 0xfe, 0x53, 0xf8, 0x87, 0x74, 0xd8, 0x25, 0xbc, 0x6c, 0x60, 0x65, 0x09, 0xe9, 0x14, 0xfd,
	0xe4, 0xe8, 0xeb, 0x2a, 0x42, 0xdf, 0x57, 0x11, 0xfa, 0xb9, 0x8a, 0xd0, 0xc9, 0x83, 0xad, 0x87,
	0xb3, 0xe1, 0x66, 0x4f, 0x77, 0xec, 0xa1, 0x3c, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x91,
	0x47, 0xab, 0xd1, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	Create(ctx context.Context, in *v1alpha1.Workflow, opts ...grpc.CallOption) (*WorkflowCreateResponse, error)
	List(ctx context.Context, in *WorkflowQuery, opts ...grpc.CallOption) (*WorkflowListResponse, error)
	Get(ctx context.Context, in *WorkflowQuery, opts ...grpc.CallOption) (*WorkflowResponse, error)
}

type workflowServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkflowServiceClient(cc *grpc.ClientConn) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) Create(ctx context.Context, in *v1alpha1.Workflow, opts ...grpc.CallOption) (*WorkflowCreateResponse, error) {
	out := new(WorkflowCreateResponse)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) List(ctx context.Context, in *WorkflowQuery, opts ...grpc.CallOption) (*WorkflowListResponse, error) {
	out := new(WorkflowListResponse)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) Get(ctx context.Context, in *WorkflowQuery, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
type WorkflowServiceServer interface {
	Create(context.Context, *v1alpha1.Workflow) (*WorkflowCreateResponse, error)
	List(context.Context, *WorkflowQuery) (*WorkflowListResponse, error)
	Get(context.Context, *WorkflowQuery) (*WorkflowResponse, error)
}

func RegisterWorkflowServiceServer(s *grpc.Server, srv WorkflowServiceServer) {
	s.RegisterService(&_WorkflowService_serviceDesc, srv)
}

func _WorkflowService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).Create(ctx, req.(*v1alpha1.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).List(ctx, req.(*WorkflowQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).Get(ctx, req.(*WorkflowQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WorkflowService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WorkflowService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WorkflowService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/server/workflow/workflow.proto",
}

func (m *WorkflowCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Response)))
		i += copy(dAtA[i:], m.Response)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WorkflowListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workflows) > 0 {
		for _, msg := range m.Workflows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WorkflowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Workflows != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.Workflows.Size()))
		n1, err := m.Workflows.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WorkflowQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.StartIdx != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.StartIdx))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintWorkflow(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WorkflowCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workflows) > 0 {
		for _, e := range m.Workflows {
			l = e.Size()
			n += 1 + l + sovWorkflow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workflows != nil {
		l = m.Workflows.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.StartIdx != 0 {
		n += 1 + sovWorkflow(uint64(m.StartIdx))
	}
	if m.PageSize != 0 {
		n += 1 + sovWorkflow(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkflow(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWorkflow(x uint64) (n int) {
	return sovWorkflow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkflowCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workflows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workflows = append(m.Workflows, &v1alpha1.Workflow{})
			if err := m.Workflows[len(m.Workflows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workflows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workflows == nil {
				m.Workflows = &v1alpha1.Workflow{}
			}
			if err := m.Workflows.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIdx", wireType)
			}
			m.StartIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflow
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWorkflow
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkflow
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkflow(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWorkflow
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkflow = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflow   = fmt.Errorf("proto: integer overflow")
)
