// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd/server/workflowhistory/workflowhistory.proto

package workflowhistory

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowHistoryListRequest struct {
	ListOptions          *v1.ListOptions `protobuf:"bytes,1,opt,name=listOptions,proto3" json:"listOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WorkflowHistoryListRequest) Reset()         { *m = WorkflowHistoryListRequest{} }
func (m *WorkflowHistoryListRequest) String() string { return proto.CompactTextString(m) }
func (*WorkflowHistoryListRequest) ProtoMessage()    {}
func (*WorkflowHistoryListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a546c3f97ba9ddb, []int{0}
}
func (m *WorkflowHistoryListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowHistoryListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowHistoryListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowHistoryListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowHistoryListRequest.Merge(m, src)
}
func (m *WorkflowHistoryListRequest) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowHistoryListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowHistoryListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowHistoryListRequest proto.InternalMessageInfo

func (m *WorkflowHistoryListRequest) GetListOptions() *v1.ListOptions {
	if m != nil {
		return m.ListOptions
	}
	return nil
}

type WorkflowHistoryGetRequest struct {
	Namespace            string         `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uid                  string         `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	GetOptions           *v1.GetOptions `protobuf:"bytes,3,opt,name=getOptions,proto3" json:"getOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WorkflowHistoryGetRequest) Reset()         { *m = WorkflowHistoryGetRequest{} }
func (m *WorkflowHistoryGetRequest) String() string { return proto.CompactTextString(m) }
func (*WorkflowHistoryGetRequest) ProtoMessage()    {}
func (*WorkflowHistoryGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a546c3f97ba9ddb, []int{1}
}
func (m *WorkflowHistoryGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowHistoryGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowHistoryGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowHistoryGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowHistoryGetRequest.Merge(m, src)
}
func (m *WorkflowHistoryGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowHistoryGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowHistoryGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowHistoryGetRequest proto.InternalMessageInfo

func (m *WorkflowHistoryGetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WorkflowHistoryGetRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *WorkflowHistoryGetRequest) GetGetOptions() *v1.GetOptions {
	if m != nil {
		return m.GetOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkflowHistoryListRequest)(nil), "WorkflowHistoryListRequest")
	proto.RegisterType((*WorkflowHistoryGetRequest)(nil), "WorkflowHistoryGetRequest")
}

func init() {
	proto.RegisterFile("cmd/server/workflowhistory/workflowhistory.proto", fileDescriptor_0a546c3f97ba9ddb)
}

var fileDescriptor_0a546c3f97ba9ddb = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x3f, 0x6b, 0x14, 0x41,
	0x14, 0x67, 0x2e, 0x20, 0x64, 0xd2, 0xc8, 0x28, 0x72, 0xae, 0xe1, 0x08, 0x5b, 0x89, 0xe8, 0x4c,
	0xf6, 0x62, 0x61, 0x63, 0x11, 0x2d, 0xce, 0x22, 0xa0, 0x5c, 0x0a, 0xc1, 0x6e, 0xb2, 0xf7, 0x9c,
	0x1d, 0xf7, 0xcf, 0x6c, 0x66, 0x66, 0x37, 0x84, 0x90, 0xc6, 0xaf, 0x60, 0x61, 0x65, 0xe5, 0x97,
	0xb1, 0x14, 0x6c, 0x2c, 0xe5, 0xf0, 0x83, 0xc8, 0x4c, 0xf6, 0xcf, 0xb1, 0xe7, 0x82, 0x60, 0xf7,
	0xf6, 0x3d, 0xde, 0xef, 0xcf, 0xfc, 0xde, 0xe2, 0xc3, 0x38, 0x5f, 0x31, 0x03, 0xba, 0x06, 0xcd,
	0x2e, 0x94, 0x4e, 0xdf, 0x67, 0xea, 0x22, 0x91, 0xc6, 0x2a, 0x7d, 0x39, 0xfc, 0xa6, 0xa5, 0x56,
	0x56, 0x05, 0x77, 0x85, 0x12, 0xca, 0x97, 0xcc, 0x55, 0x4d, 0x77, 0x5f, 0x28, 0x25, 0x32, 0x60,
	0xbc, 0x94, 0x8c, 0x17, 0x85, 0xb2, 0xdc, 0x4a, 0x55, 0x98, 0x66, 0xfa, 0x34, 0x7d, 0x66, 0xa8,
	0x54, 0x6e, 0x9a, 0xf3, 0x38, 0x91, 0x05, 0xe8, 0x4b, 0x56, 0xa6, 0xc2, 0x35, 0x0c, 0xcb, 0xc1,
	0x72, 0x56, 0x47, 0x4c, 0x40, 0x01, 0x9a, 0x5b, 0x58, 0x35, 0x5b, 0x2f, 0x85, 0xb4, 0x49, 0x75,
	0x46, 0x63, 0x95, 0x33, 0xae, 0x3d, 0xe9, 0x07, 0x5f, 0xf4, 0xab, 0xad, 0x44, 0x56, 0x47, 0x3c,
	0x2b, 0x13, 0xbe, 0x0d, 0x12, 0xf6, 0xd4, 0x2c, 0x56, 0x1a, 0xfe, 0x42, 0x14, 0x9e, 0xe3, 0xe0,
	0x6d, 0x03, 0xf4, 0xea, 0xc6, 0xeb, 0x89, 0x34, 0x76, 0x09, 0xe7, 0x15, 0x18, 0x4b, 0x4e, 0xf1,
	0x5e, 0x26, 0x8d, 0x7d, 0x5d, 0x7a, 0x47, 0x53, 0x74, 0x80, 0x1e, 0xee, 0xcd, 0x23, 0x7a, 0x83,
	0x4b, 0x37, 0x2d, 0xd1, 0x32, 0x15, 0xae, 0x61, 0xa8, 0xb3, 0x44, 0xeb, 0x88, 0x9e, 0xf4, 0x8b,
	0xcb, 0x4d, 0x94, 0xf0, 0x0b, 0xc2, 0xf7, 0x07, 0x9c, 0x0b, 0xe8, 0x28, 0xf7, 0xf1, 0x6e, 0xc1,
	0x73, 0x30, 0x25, 0x8f, 0xc1, 0x13, 0xee, 0x2e, 0xfb, 0x06, 0xb9, 0x8d, 0x77, 0x2a, 0xb9, 0x9a,
	0x4e, 0x7c, 0xdf, 0x95, 0xe4, 0x0d, 0xc6, 0x02, 0x3a, 0x85, 0x3b, 0x5e, 0xe1, 0xe1, 0xbf, 0x29,
	0x5c, 0x74, 0x7b, 0xcb, 0x0d, 0x8c, 0xf9, 0xcf, 0x09, 0xbe, 0x37, 0xd0, 0x77, 0x0a, 0xba, 0x96,
	0x31, 0x90, 0xcf, 0x08, 0xdf, 0x71, 0xbe, 0x06, 0x63, 0xf2, 0x80, 0x8e, 0x3f, 0x62, 0x70, 0x4c,
	0xfb, 0x30, 0x69, 0x1b, 0xa6, 0x2f, 0x7a, 0x49, 0x6d, 0x98, 0xb4, 0x0d, 0xb3, 0x03, 0x74, 0x48,
	0xe1, 0xc1, 0xc7, 0x1f, 0xbf, 0x3f, 0x4d, 0x02, 0x32, 0xf5, 0x59, 0xd6, 0x51, 0x17, 0xfe, 0x93,
	0xe6, 0x40, 0xc9, 0x57, 0x84, 0xc9, 0x02, 0xb6, 0x84, 0x05, 0x74, 0xf4, 0xa5, 0x83, 0xe7, 0xff,
	0xa5, 0x2b, 0x9c, 0x7b, 0x4d, 0x8f, 0xc9, 0xa3, 0x31, 0x4d, 0xec, 0xaa, 0xcb, 0xed, 0x9a, 0x5d,
	0x55, 0x72, 0x75, 0xfd, 0xe2, 0xf8, 0xdb, 0x7a, 0x86, 0xbe, 0xaf, 0x67, 0xe8, 0xd7, 0x7a, 0x86,
	0xde, 0x1d, 0x8d, 0x1e, 0xf9, 0xf8, 0x9f, 0x79, 0x76, 0xcb, 0xdf, 0xed, 0xd1, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x2d, 0x3f, 0x93, 0xfd, 0xbe, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkflowHistoryServiceClient is the client API for WorkflowHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowHistoryServiceClient interface {
	ListWorkflowHistory(ctx context.Context, in *WorkflowHistoryListRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowList, error)
	GetWorkflowHistory(ctx context.Context, in *WorkflowHistoryGetRequest, opts ...grpc.CallOption) (*v1alpha1.Workflow, error)
}

type workflowHistoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkflowHistoryServiceClient(cc *grpc.ClientConn) WorkflowHistoryServiceClient {
	return &workflowHistoryServiceClient{cc}
}

func (c *workflowHistoryServiceClient) ListWorkflowHistory(ctx context.Context, in *WorkflowHistoryListRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowList, error) {
	out := new(v1alpha1.WorkflowList)
	err := c.cc.Invoke(ctx, "/WorkflowHistoryService/ListWorkflowHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowHistoryServiceClient) GetWorkflowHistory(ctx context.Context, in *WorkflowHistoryGetRequest, opts ...grpc.CallOption) (*v1alpha1.Workflow, error) {
	out := new(v1alpha1.Workflow)
	err := c.cc.Invoke(ctx, "/WorkflowHistoryService/GetWorkflowHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowHistoryServiceServer is the server API for WorkflowHistoryService service.
type WorkflowHistoryServiceServer interface {
	ListWorkflowHistory(context.Context, *WorkflowHistoryListRequest) (*v1alpha1.WorkflowList, error)
	GetWorkflowHistory(context.Context, *WorkflowHistoryGetRequest) (*v1alpha1.Workflow, error)
}

// UnimplementedWorkflowHistoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkflowHistoryServiceServer struct {
}

func (*UnimplementedWorkflowHistoryServiceServer) ListWorkflowHistory(ctx context.Context, req *WorkflowHistoryListRequest) (*v1alpha1.WorkflowList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowHistory not implemented")
}
func (*UnimplementedWorkflowHistoryServiceServer) GetWorkflowHistory(ctx context.Context, req *WorkflowHistoryGetRequest) (*v1alpha1.Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowHistory not implemented")
}

func RegisterWorkflowHistoryServiceServer(s *grpc.Server, srv WorkflowHistoryServiceServer) {
	s.RegisterService(&_WorkflowHistoryService_serviceDesc, srv)
}

func _WorkflowHistoryService_ListWorkflowHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowHistoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowHistoryServiceServer).ListWorkflowHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowHistoryService/ListWorkflowHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowHistoryServiceServer).ListWorkflowHistory(ctx, req.(*WorkflowHistoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowHistoryService_GetWorkflowHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowHistoryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowHistoryServiceServer).GetWorkflowHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowHistoryService/GetWorkflowHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowHistoryServiceServer).GetWorkflowHistory(ctx, req.(*WorkflowHistoryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowHistoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WorkflowHistoryService",
	HandlerType: (*WorkflowHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkflowHistory",
			Handler:    _WorkflowHistoryService_ListWorkflowHistory_Handler,
		},
		{
			MethodName: "GetWorkflowHistory",
			Handler:    _WorkflowHistoryService_GetWorkflowHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/server/workflowhistory/workflowhistory.proto",
}

func (m *WorkflowHistoryListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowHistoryListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowHistoryListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ListOptions != nil {
		{
			size, err := m.ListOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowhistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowHistoryGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowHistoryGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowHistoryGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GetOptions != nil {
		{
			size, err := m.GetOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflowhistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintWorkflowhistory(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintWorkflowhistory(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflowhistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflowhistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowHistoryListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListOptions != nil {
		l = m.ListOptions.Size()
		n += 1 + l + sovWorkflowhistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowHistoryGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovWorkflowhistory(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovWorkflowhistory(uint64(l))
	}
	if m.GetOptions != nil {
		l = m.GetOptions.Size()
		n += 1 + l + sovWorkflowhistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkflowhistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflowhistory(x uint64) (n int) {
	return sovWorkflowhistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkflowHistoryListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowhistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowHistoryListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowHistoryListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListOptions == nil {
				m.ListOptions = &v1.ListOptions{}
			}
			if err := m.ListOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowhistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowHistoryGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowhistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowHistoryGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowHistoryGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetOptions == nil {
				m.GetOptions = &v1.GetOptions{}
			}
			if err := m.GetOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowhistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflowhistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflowhistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflowhistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowhistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowhistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflowhistory
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWorkflowhistory
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkflowhistory
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkflowhistory(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWorkflowhistory
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkflowhistory = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflowhistory   = fmt.Errorf("proto: integer overflow")
)
